
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftMASMENOSleftPORDIVleftLPARENRPARENleftLCORRCORrightUMENOSASIGN CADENA CIN COUT DECIMAL DELETE DIV ELSE ENTERO GET IF INCLUDE LCOR LKEY LPAREN MAIN MAS MAYORQ MENORQ MENOS NAMESPACE POR POST PRINT PT PTCOMA RCOR RESERV REVALUAR RKEY RPAREN STD THEN UPDATE WHILEinstrucciones    : instruccion instrucciones\n                        | instruccion instruccion : REVALUAR LCOR expresion RCOR PTCOMAexpresion :  expresion MAS expresion\n                  | expresion MENOS expresion\n                  | expresion POR expresion\n                  | expresion DIV expresionexpresion : MENOS expresion %prec UMENOSexpresion : LPAREN expresion RPARENexpresion    : ENTERO\n                    | DECIMAL'
    
_lr_action_items = {'REVALUAR':([0,2,18,],[3,3,-3,]),'$end':([1,2,4,18,],[0,-2,-1,-3,]),'LCOR':([3,],[5,]),'MENOS':([5,6,7,8,9,10,12,13,14,15,16,17,19,20,21,22,23,],[7,13,7,7,-10,-11,7,7,7,7,-8,13,-4,-5,-6,-7,-9,]),'LPAREN':([5,7,8,12,13,14,15,],[8,8,8,8,8,8,8,]),'ENTERO':([5,7,8,12,13,14,15,],[9,9,9,9,9,9,9,]),'DECIMAL':([5,7,8,12,13,14,15,],[10,10,10,10,10,10,10,]),'RCOR':([6,9,10,16,19,20,21,22,23,],[11,-10,-11,-8,-4,-5,-6,-7,-9,]),'MAS':([6,9,10,16,17,19,20,21,22,23,],[12,-10,-11,-8,12,-4,-5,-6,-7,-9,]),'POR':([6,9,10,16,17,19,20,21,22,23,],[14,-10,-11,-8,14,14,14,-6,-7,-9,]),'DIV':([6,9,10,16,17,19,20,21,22,23,],[15,-10,-11,-8,15,15,15,-6,-7,-9,]),'RPAREN':([9,10,16,17,19,20,21,22,23,],[-10,-11,-8,23,-4,-5,-6,-7,-9,]),'PTCOMA':([11,],[18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,2,],[1,4,]),'instruccion':([0,2,],[2,2,]),'expresion':([5,7,8,12,13,14,15,],[6,16,17,19,20,21,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> instruccion instrucciones','instrucciones',2,'p_instrucciones_lista','sintactico.py',58),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_lista','sintactico.py',59),
  ('instruccion -> REVALUAR LCOR expresion RCOR PTCOMA','instruccion',5,'p_instrucciones_evaluar','sintactico.py',62),
  ('expresion -> expresion MAS expresion','expresion',3,'p_expresion_operators','sintactico.py',66),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_expresion_operators','sintactico.py',67),
  ('expresion -> expresion POR expresion','expresion',3,'p_expresion_operators','sintactico.py',68),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion_operators','sintactico.py',69),
  ('expresion -> MENOS expresion','expresion',2,'p_expresion_unaria','sintactico.py',76),
  ('expresion -> LPAREN expresion RPAREN','expresion',3,'p_expresion_agrupacion','sintactico.py',80),
  ('expresion -> ENTERO','expresion',1,'p_expresion_number','sintactico.py',84),
  ('expresion -> DECIMAL','expresion',1,'p_expresion_number','sintactico.py',85),
]
